openapi: 3.1.0
info:
  version: 0.0.1
  title: NEU Connect API
servers:
  - url: http://localhost:8080
paths:
  /api/posts:
    post:
      summary: Create a new Post
      description: Create a new Post
      tags:  # Associate this operation with the "Post endpoints" tag
        - Post API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        201:
          description: Post created successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /api/posts/{id}:
    get:
      summary: Get a specific Post
      description: Get a specific Post
      tags:  # Associate this operation with the "Post endpoints" tag
        - Post API
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Post to retrieve
          schema:
            type: integer  # Assuming the ID is of type integer
      responses:
        200:
          description: Post fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /api/posts/fetch:
    get:
      summary: Get paginated List of Posts
      description: Get paginated List of Posts
      tags:  # Associate this operation with the "Post endpoints" tag
        - Post API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginationOptions'
      responses:
        200:
          description: Post fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /api/posts/{id}/comment:
    post:
      summary: Add Comment to Post
      description: Add Comment to Post
      tags:  # Associate this operation with the "Post endpoints" tag
        - Post API
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Post to retrieve
          schema:
            type: integer  # Assuming the ID is of type integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        200:
          description: Post fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /api/posts/{id}/upvote:
    patch:
      summary: Upvote a Post
      description: Upvote a Post
      tags:  # Associate this operation with the "Post endpoints" tag
        - Post API
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Post to retrieve
          schema:
            type: integer  # Assuming the ID is of type integer
      responses:
        200:
          description: Post fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /api/products:
    post:
      summary: Create a Product
      description: Create a Product
      tags:  # Associate this operation with the "Post endpoints" tag
        - Product API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        201:
          description: Created a Product successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /api/products/{id}:
    get:
      summary: Get a specific Product
      description: Get a specific Product
      tags:  # Associate this operation with the "Post endpoints" tag
        - Product API
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Product to retrieve
          schema:
            type: integer  # Assuming the ID is of type integer
      responses:
        200:
          description: Post fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /api/products/fetch:
    get:
      summary: Get paginated List of Product
      description: Get paginated List of Product
      tags:  # Associate this operation with the "Post endpoints" tag
        - Product API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginationOptions'
      responses:
        200:
          description: Product fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/cart:
    get:
      summary: Get Cart
      description: Get Cart
      tags:  # Associate this operation with the "Post endpoints" tag
        - Product API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        200:
          description: Product fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/cart/{id}:
    patch:
      summary: Update a Cart
      description: Update a cart
      tags:  # Associate this operation with the "Post endpoints" tag
        - Product API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartAction'
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the User to update
          schema:
            type: integer  # Assuming the ID is of type integer
      responses:
        200:
          description: Post fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/orders:
    post:
      summary: Create an Order
      description: Create an Order
      tags:  # Associate this operation with the "Post endpoints" tag
        - Product API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        201:
          description: Created a Product successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/notifications/fetch:
    get:
      summary: Get paginated List of notifications
      description: Get paginated List of notifications
      tags:  # Associate this operation with the "Post endpoints" tag
        - Notification API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginationOptions'
      responses:
        200:
          description: Notfication fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /api/notifications/poll:
    get:
      summary: Get number of new Notification generated
      description: Get number of new Notification generated
      tags:  # Associate this operation with the "Post endpoints" tag
        - Notification API
      responses:
        200:
          description: New Notification fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPollResult'
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /api/users:
    post:
      summary: Create a User
      description: Create a User
      tags:  # Associate this operation with the "Post endpoints" tag
        - Users API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Created a User successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/users/{id}:
    get:
      summary: Get a specific User
      description: Get a specific User
      tags:  # Associate this operation with the "Post endpoints" tag
        - Users API
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the User to retrieve
          schema:
            type: integer  # Assuming the ID is of type integer
      responses:
        200:
          description: Post fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
    patch:
      summary: Update a specific User
      description: Get a specific User
      tags:  # Associate this operation with the "Post endpoints" tag
        - Users API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the User to update
          schema:
            type: integer  # Assuming the ID is of type integer
      responses:
        200:
          description: Post fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/users/{id}/certificates:
    post:
      summary: Create a Certificate
      description: Create a Certificate
      tags:  # Associate this operation with the "Post endpoints" tag
        - Users API
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the User to retrieve
          schema:
            type: integer  # Assuming the ID is of type integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Certificate"
      responses:
        201:
          description: Created a Certificate successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/users/{id}/certificates/{cert-id}:
    patch:
      summary: Update a specific Certificate to be verified
      description: Get a specific Certificate to be verified
      tags:  # Associate this operation with the "Post endpoints" tag
        - Users API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the Certificate to update
          schema:
            type: integer  # Assuming the ID is of type integer
        - in: path
          name: cert-id
          required: true
          description: ID of the Certificate to update
          schema:
            type: integer  # Assuming the ID is of type integer
      responses:
        200:
          description: Certificate updated successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/users/fetch:
    get:
      summary: Get paginated List of User
      description: Get paginated List of User
      tags:  # Associate this operation with the "Post endpoints" tag
        - Users API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginationOptions'
      responses:
        200:
          description: Product fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/roles:
    post:
      summary: Create a Role
      description: Create a Role
      tags:  # Associate this operation with the "Post endpoints" tag
        - Admin API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        201:
          description: Created a User successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/roles/fetch:
    get:
      summary: Get paginated List of Roles
      description: Get paginated List of Roles
      tags:  # Associate this operation with the "Post endpoints" tag
        - Admin API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginationOptions'
      responses:
        200:
          description: Product fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/service-types:
    post:
      summary: Create a Service type
      description: Create a Service Type
      tags:  # Associate this operation with the "Post endpoints" tag
        - Admin API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceType"
      responses:
        201:
          description: Created a User successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/service-types/fetch:
    get:
      summary: Get paginated List of Roles
      description: Get paginated List of Roles
      tags:  # Associate this operation with the "Post endpoints" tag
        - Admin API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginationOptions'
      responses:
        200:
          description: Product fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/services/fetch:
    get:
      summary: Get paginated List of Services
      description: Get paginated List of Services
      tags:  # Associate this operation with the "Post endpoints" tag
        - Services API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginationOptions'
      responses:
        200:
          description: Services fetched successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/services:
    post:
      summary: Create a Service
      description: Create a Service
      tags:  # Associate this operation with the "Post endpoints" tag
        - Services API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceRequest"
      responses:
        201:
          description: Created a User successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /api/services/{id}:
    patch:
      summary: Update a Service
      description: Update a Service
      tags:  # Associate this operation with the "Post endpoints" tag
        - Services API
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the User to retrieve
          schema:
            type: integer  # Assuming the ID is of type integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceRequest"
      responses:
        201:
          description: Updated a User successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden

components:
  schemas:
    Post:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
        content:
          type: string
        upvote:
          type: integer
          default: 0
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        author:
          type: string  # Assuming the User ID is represented as a string
        createdAt:
          type: string  # Assuming the date is represented as a string
          format: date-time
        updatedAt:
          type: string  # Assuming the date is represented as a string
          format: date-time
        tag:
          type: array
          items:
            type: string

    Comment:
      type: object
      required:
        - comment
      properties:
        comment:
          type: string
        author:
          type: string  # Assuming the User ID is represented as a string
        likes:
          type: integer  # Likes is int type
        parentComment:
          $ref: '#/components/schemas/Comment'

    Product:
      type: object
      properties:
        karma:
          type: integer
        title:
          type: string
        description:
          type: string
        images:
          type: array
        createdAt:
          type: string  # Assuming the date is represented as a string
          format: date-time
        updatedAt:
          type: string  # Assuming the date is represented as a string
          format: date-time
        deletedAt:
          type: string  # Assuming the date is represented as a string
          format: date-time
    Cart:
      type: object
      properties:
        items:
          $ref: '#/components/schemas/Product'

    Order:
      type: object
      properties:
        notes:
          type: string
        totalKarma:
          type: integer
        status:
          enum:
            - PLACED
            - CANCELLEd
            - COMPLETED
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'


    PaginationOptions:
      type: object
      properties:
        pageSize:
          type: integer
        pageNumber:
          type: integer

    Notification:
      type: object
      properties:
        message:
          type: string
        createdAt:
          type: string  # Assuming the date is represented as a string
          format: date-time
        status:
          type: string
          enum:
            - GENERATED
            - SENT
            - READ

    NotificationPollResult:
      type: object
      properties:
        count:
          type: integer

    CartAction:
      type: object
      properties:
        type:
          enum:
            - ADD
            - REMOVE
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'


    Certificate:
      type: object
      properties:
        isVerified:
          type: boolean
        path:
          type: string
        serviceTypes:
          enum:
            - FITNESS
            - TUTORING
            - CLASSICAL DANCER

    ServiceRequest:
      type: object
      properties:
        description:
          type: string
        title:
          type: string
        status:
          enum:
            - UNASSIGNED
            - ASSIGNED
            - IN PROGRESS
            - COMPLETED
            - CANCELLED
        creatorID:
          type: integer
        karma:
          type: integer
        serviceTypes:
          enum:
            - FITNESS
            - TUTORING
            - CLASSICAL DANCER
    ServiceType:
      type: object
      properties:
        value:
          enum:
            - FITNESS
            - TUTORING
            - CLASSICAL DANCER
    Role:
      type: object
      properties:
        value:
          enum:
            - ADMIN
            - AUTHORITY
            - USERS
            - DELIVERY PERSON
    Tag:
      type: object
      properties:
        value:
          enum:
            - HOUSING
            - LEETCODE
            - CLOUD-COMPUTING
            - AED
            - FREEBIES
    User:
      type: object
      properties:
        fname:
          type: string
        lname:
          type: string
        gender:
          type: string
        dob:
          type: string  # Assuming the date is represented as a string
          format: date-time
        username:
          type: string
        password:
          type: string
        nuid:
          type: string
        isVerified:
          type: boolean
        Interests:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        certificate:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'

tags:
  - name: Post API  # Define the "Post endpoints" tag
    description: Endpoints related to managing posts

  - name: Product API  # Define the "Post endpoints" tag
    description: Endpoints related to managing Product

  - name: Notification API  # Define the "Notification endpoints" tag
    description: Endpoints related to managing Notification

  - name: Users API  # Define the "Users endpoints" tag
    description: Endpoints related to managing Users